name: Release Flock Native

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # Checkout the actual ref (tag) that triggered this
          fetch-depth: 0  # Fetch all history for release notes generation
          fetch-tags: true  # Explicitly fetch all tags

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Strip any leading 'v' and dots, normalize the version
            RAW_VERSION="${{ github.event.inputs.version }}"
            echo "Raw input version: $RAW_VERSION"

            VERSION="${RAW_VERSION#v}"  # Remove leading 'v' if present
            echo "After removing 'v': $VERSION"

            VERSION="${VERSION#.}"       # Remove leading '.' if present
            echo "After removing '.': $VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final normalized version: $VERSION"

      - name: Get previous tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREVIOUS_TAG"

      - name: Check and bump package.json version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          echo "üì¶ Current package.json version: $CURRENT_VERSION"
          echo "üéØ Target release version: $VERSION"

          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            echo "‚ö†Ô∏è  Version mismatch detected! Updating package.json..."

            # Update package.json version
            npm version "$VERSION" --no-git-tag-version --allow-same-version

            # Configure git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            # Determine the branch to push to
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              # For manual triggers, use the current branch
              BRANCH="${{ github.ref_name }}"
            else
              # For tag pushes, find the branch the tag points to or use main
              BRANCH=$(git branch -r --contains HEAD | grep -v HEAD | head -1 | sed 's|origin/||' | xargs)
              if [ -z "$BRANCH" ]; then
                BRANCH="main"
              fi
            fi

            echo "üì§ Pushing version bump to branch: $BRANCH"

            # Commit and push the version bump
            git add package.json package-lock.json
            git commit -m "chore: bump version to $VERSION for release"
            git push origin HEAD:refs/heads/$BRANCH

            echo "‚úÖ Package.json updated and committed to $VERSION on branch $BRANCH"
          else
            echo "‚úÖ Package.json version already matches release version"
          fi

      - name: Verify tag exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the normalized version from the previous step
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG_NAME="v${VERSION}"

          echo "Checking for tag $TAG_NAME..."
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "‚úÖ Tag $TAG_NAME exists"
          else
            echo "‚ÑπÔ∏è  Tag $TAG_NAME will be created by gh release create"
          fi

      - name: Generate Release Notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            let body = '';

            // Try to generate release notes, but handle case where tag doesn't exist yet
            try {
              const { data } = await github.rest.repos.generateReleaseNotes({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: 'v${{ steps.get_version.outputs.version }}',
                previous_tag_name: '${{ steps.get_previous_tag.outputs.previous_tag }}' || undefined
              });
              body = data.body;
            } catch (error) {
              console.log('Could not auto-generate release notes (tag may not exist yet):', error.message);
              body = '## What\'s Changed\n\nSee commit history for changes.';
            }

            // Parse and enhance the generated notes

            // Add custom sections
            const customNotes = `
            ## üì¶ Downloads

            ### Windows
            - **Portable**: \`Flock-Native-${{ steps.get_version.outputs.version }}.exe\` (No installation required)

            ### macOS
            - **DMG (Intel x64)**: \`Flock-Native-${{ steps.get_version.outputs.version }}-x64.dmg\`
            - **ZIP (Intel x64)**: \`Flock-Native-${{ steps.get_version.outputs.version }}-mac-x64.zip\`

            ### Linux
            - **AppImage**: \`Flock-Native-${{ steps.get_version.outputs.version }}.AppImage\` (Universal, no installation)
            - **DEB Package**: \`flock-native_${{ steps.get_version.outputs.version }}_amd64.deb\` (Debian/Ubuntu)
            - **RPM Package**: \`flock-native-${{ steps.get_version.outputs.version }}.x86_64.rpm\` (Fedora/RHEL)

            ## üìù Installation Instructions

            See the [installation guide](https://github.com/CommunityStream-io/flock/blob/main/INSTALLATION.md) for detailed platform-specific instructions.

            ${body}

            ## üìã System Requirements

            - **Windows**: Windows 10 or later (64-bit)
            - **macOS**: macOS 10.15 (Catalina) or later (Universal: Intel & Apple Silicon)
            - **Linux**: Ubuntu 20.04+ or equivalent

            ## ‚ö†Ô∏è Known Issues

            - Windows SmartScreen and macOS Gatekeeper may show warnings (app is not yet code-signed)
            - This is expected for unsigned applications

            ## üí¨ Feedback

            Please report issues or provide feedback at: https://github.com/CommunityStream-io/flock/issues
            `;

            core.setOutput('notes', customNotes);
            return customNotes;

      - name: Create Tag and Release
        id: create_release
        uses: actions/github-script@v7
        env:
          RELEASE_NOTES: ${{ steps.generate_notes.outputs.notes }}
        with:
          script: |
            const version = '${{ steps.get_version.outputs.version }}';
            const tagName = `v${version}`;
            const releaseNotes = process.env.RELEASE_NOTES;

            console.log(`Creating release for ${tagName}...`);

            // First, create the tag if it doesn't exist
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });
              console.log(`‚úÖ Tag ${tagName} created`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`‚úÖ Tag ${tagName} already exists`);
              } else {
                throw error;
              }
            }

            // Then create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Flock Native v${version}`,
              body: releaseNotes,
              draft: true,
              prerelease: false
            });

            // Note: Draft releases show "untagged-*" URLs until published
            // This is expected GitHub behavior and will resolve to the proper tag URL on publish
            console.log(`‚úÖ Release created: ${release.html_url}`);
            console.log(`üìé Upload URL: ${release.upload_url}`);
            console.log(`‚ÑπÔ∏è  Draft releases show as "untagged" until published - this is normal`);

            // Set outputs
            core.setOutput('upload_url', release.upload_url);
            core.setOutput('id', release.id);
            core.setOutput('html_url', release.html_url);

            return {
              upload_url: release.upload_url,
              id: release.id,
              html_url: release.html_url
            };

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      ENABLE_SENTRY: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update package.json version
        run: |
          $VERSION = "${{ needs.create-release.outputs.version }}"
          Write-Host "Updating package.json to version $VERSION"
          npm version "$VERSION" --no-git-tag-version --allow-same-version
          Write-Host "‚úÖ Package version updated to $VERSION"
        shell: pwsh

      - name: Set version in environment files
        run: |
          $VERSION = "${{ needs.create-release.outputs.version }}"
          Write-Host "üîß Setting version in environment files..."
          Write-Host "üì¶ Using version: $VERSION"
          
          # Update development environment
          (Get-Content "projects/flock-native/src/environments/environment.ts") -replace "version: '0\.6\.0-dev'", "version: '$VERSION-dev'" | Set-Content "projects/flock-native/src/environments/environment.ts"
          Write-Host "‚úÖ Updated development environment with version: $VERSION-dev"
          
          # Update production environment  
          (Get-Content "projects/flock-native/src/environments/environment.prod.ts") -replace "version: '0\.6\.0'", "version: '$VERSION'" | Set-Content "projects/flock-native/src/environments/environment.prod.ts"
          Write-Host "‚úÖ Updated production environment with version: $VERSION"
        shell: pwsh

      - name: Build Angular app
        run: npm run build:native:prod

      - name: Build Windows app
        run: |
          Write-Host "ü™ü Building Windows app natively..."
          Write-Host "üì¶ Running npm run pack:win"
          npm run pack:win
          Write-Host "‚úÖ Native Windows build completed"
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build output
        run: |
          Write-Host "üìÅ Checking build output..."
          Write-Host "üìÇ Contents of dist/electron/:"
          if (Test-Path "dist/electron") {
            Get-ChildItem -Path "dist/electron" -Recurse | Select-Object FullName, Length
          } else {
            Write-Host "dist/electron/ not found"
          }

          Write-Host ""
          Write-Host "üì¶ All .exe files:"
          if (Test-Path "dist/electron") {
            Get-ChildItem -Path "dist" -Recurse -Filter "*.exe" | Select-Object FullName, Length
          } else {
            Write-Host "No .exe files found"
          }

          Write-Host ""
          $VERSION = "${{ needs.create-release.outputs.version }}"
          Write-Host "üîç Looking for version: $VERSION"

          if (Test-Path "dist/electron/win-unpacked") {
            Write-Host "‚úÖ Windows unpacked build found"
            Get-ChildItem -Path "dist/electron/win-unpacked" | Select-Object Name, Length | Format-Table
          } else {
            Write-Host "‚ö†Ô∏è  Unpacked directory not found"
          }
        shell: pwsh


      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifacts
          path: dist/electron/
          retention-days: 30

  build-macos-arm:
    name: Build macOS ARM
    needs: create-release
    runs-on: macos-15
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      ENABLE_SENTRY: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set version in environment files
        run: |
          echo "üîß Setting version in environment files..."
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "üì¶ Using version: $VERSION"
          
          # Update development environment
          sed -i.bak "s/version: '0\.6\.0-dev'/version: '$VERSION-dev'/g" projects/flock-native/src/environments/environment.ts
          rm -f projects/flock-native/src/environments/environment.ts.bak
          echo "‚úÖ Updated development environment with version: $VERSION-dev"
          
          # Update production environment  
          sed -i.bak "s/version: '0\.6\.0'/version: '$VERSION'/g" projects/flock-native/src/environments/environment.prod.ts
          rm -f projects/flock-native/src/environments/environment.prod.ts.bak
          echo "‚úÖ Updated production environment with version: $VERSION"

      - name: Build Angular app
        run: npm run build:native:prod

      - name: Build macOS packages (ARM)
        run: |
          echo "üçé Building macOS packages for ARM architecture..."
          echo "üì¶ Running npm run pack:mac:arm"
          npm run pack:mac:arm
          echo "‚úÖ macOS builds completed (ARM)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 

  build-macos:
    name: Build macOS Intel
    needs: create-release
    runs-on: macos-15-intel
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      ENABLE_SENTRY: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set version in environment files
        run: |
          echo "üîß Setting version in environment files..."
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "üì¶ Using version: $VERSION"
          
          # Update development environment
          sed -i.bak "s/version: '0\.6\.0-dev'/version: '$VERSION-dev'/g" projects/flock-native/src/environments/environment.ts
          rm -f projects/flock-native/src/environments/environment.ts.bak
          echo "‚úÖ Updated development environment with version: $VERSION-dev"
          
          # Update production environment  
          sed -i.bak "s/version: '0\.6\.0'/version: '$VERSION'/g" projects/flock-native/src/environments/environment.prod.ts
          rm -f projects/flock-native/src/environments/environment.prod.ts.bak
          echo "‚úÖ Updated production environment with version: $VERSION"

      - name: Build Angular app
        run: npm run build:native:prod

      - name: Build macOS packages (Intel)
        run: |
          echo "üçé Building macOS packages for Intel architecture..."
          echo "üì¶ Running npm run pack:mac:intel"
          npm run pack:mac:intel
          echo "‚úÖ macOS builds completed (Intel)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      ENABLE_SENTRY: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Set version in environment files
        run: |
          echo "üîß Setting version in environment files..."
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "üì¶ Using version: $VERSION"
          
          # Update development environment
          sed -i "s/version: '0\.6\.0-dev'/version: '$VERSION-dev'/g" projects/flock-native/src/environments/environment.ts
          echo "‚úÖ Updated development environment with version: $VERSION-dev"
          
          # Update production environment  
          sed -i "s/version: '0\.6\.0'/version: '$VERSION'/g" projects/flock-native/src/environments/environment.prod.ts
          echo "‚úÖ Updated production environment with version: $VERSION"

      - name: Build Angular app
        run: npm run build:native:prod

      - name: Build and publish Linux packages
        run: |
          echo "üêß Building Linux packages..."
          echo "üì¶ Running npm run pack:linux"
          npm run pack:linux
          echo "‚úÖ Linux build completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-source-maps:
    name: Upload Source Maps to Sentry
    needs: [build-windows, build-macos, build-linux, create-release]
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_RELEASE: ${{ needs.create-release.outputs.version }}
      ENABLE_SENTRY: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set version in environment files
        run: |
          echo "üîß Setting version in environment files..."
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "üì¶ Using version: $VERSION"
          
          # Update development environment
          sed -i "s/version: '0\.6\.0-dev'/version: '$VERSION-dev'/g" projects/flock-native/src/environments/environment.ts
          echo "‚úÖ Updated development environment with version: $VERSION-dev"
          
          # Update production environment  
          sed -i "s/version: '0\.6\.0'/version: '$VERSION'/g" projects/flock-native/src/environments/environment.prod.ts
          echo "‚úÖ Updated production environment with version: $VERSION"

      - name: Build Angular app for source maps
        run: npm run build:native:prod

      - name: Upload Source Maps to Sentry
        if: env.SENTRY_AUTH_TOKEN != ''
        run: npm run sentry:upload:all
        continue-on-error: true

  notify-build-complete:
    name: Notify Build Complete
    needs: [build-windows, build-macos, build-linux, upload-source-maps, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Add comment to release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.create-release.outputs.version }}';
            const releaseId = '${{ needs.create-release.outputs.release_id }}';

            // Get the release by ID (works with draft releases showing "untagged" URLs)
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            // Update release body with build completion note
            const updatedBody = release.body + `

            ---

            ## ‚úÖ Build Status

            All platform builds completed successfully! This release is ready for review.

            **Build Summary:**
            - ‚úÖ Windows (Portable executable)
            - ‚úÖ macOS (Intel x64 + Apple Silicon ARM64)
            - ‚úÖ Linux (AppImage, DEB, RPM)

            **Next Steps:**
            1. Review the release notes above
            2. Test the installers if needed
            3. Publish the release when ready

            **To publish this release:**
            \`\`\`bash
            gh release edit v${version} --draft=false
            \`\`\`

            Or use the [Publish Release workflow](https://github.com/CommunityStream-io/flock/actions/workflows/publish-release.yml).
            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: updatedBody
            });

            console.log('‚úÖ Release notes updated with build status');

      - name: Post summary
        run: |
          echo "## üéâ Release Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Draft (awaiting approval)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the [draft release](https://github.com/CommunityStream-io/flock/releases)" >> $GITHUB_STEP_SUMMARY
          echo "2. Test installers if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Run the [Publish Release](https://github.com/CommunityStream-io/flock/actions/workflows/publish-release.yml) workflow to publish" >> $GITHUB_STEP_SUMMARY
