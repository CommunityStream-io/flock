name: Release Flock Native

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes generation

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Get previous tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREVIOUS_TAG"

      - name: Generate Release Notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}',
              previous_tag_name: '${{ steps.get_previous_tag.outputs.previous_tag }}' || undefined
            });
            
            // Parse and enhance the generated notes
            let body = data.body;
            
            // Add custom sections
            const customNotes = `
            ## üì¶ Downloads
            
            ### Windows
            - **Installer**: \`Flock-Native-Setup-${{ steps.get_version.outputs.version }}.exe\` (Recommended)
            - **Portable**: \`Flock-Native-${{ steps.get_version.outputs.version }}.exe\` (No installation required)
            - **ZIP Archive**: \`Flock-Native-${{ steps.get_version.outputs.version }}-win.zip\`
            
            ### macOS
            - **DMG**: \`Flock-Native-${{ steps.get_version.outputs.version }}-universal.dmg\` (Recommended)
            - **ZIP Archive**: \`Flock-Native-${{ steps.get_version.outputs.version }}-mac.zip\`
            
            ### Linux
            - **AppImage**: \`Flock-Native-${{ steps.get_version.outputs.version }}.AppImage\` (Universal, no installation)
            - **DEB Package**: \`flock-native_${{ steps.get_version.outputs.version }}_amd64.deb\` (Debian/Ubuntu)
            - **RPM Package**: \`flock-native-${{ steps.get_version.outputs.version }}.x86_64.rpm\` (Fedora/RHEL)
            
            ## üìù Installation Instructions
            
            See the [installation guide](https://github.com/CommunityStream-io/flock/blob/main/INSTALLATION.md) for detailed platform-specific instructions.
            
            ${body}
            
            ## üìã System Requirements
            
            - **Windows**: Windows 10 or later (64-bit)
            - **macOS**: macOS 10.15 (Catalina) or later (Universal: Intel & Apple Silicon)
            - **Linux**: Ubuntu 20.04+ or equivalent
            
            ## ‚ö†Ô∏è Known Issues
            
            - Windows SmartScreen and macOS Gatekeeper may show warnings (app is not yet code-signed)
            - This is expected for unsigned applications
            
            ## üí¨ Feedback
            
            Please report issues or provide feedback at: https://github.com/CommunityStream-io/flock/issues
            `;
            
            core.setOutput('notes', customNotes);
            return customNotes;

      - name: Create Release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NOTES: ${{ steps.generate_notes.outputs.notes }}
        run: |
          TAG_NAME="${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}"
          
          # Write notes to file to avoid shell escaping issues
          echo "$RELEASE_NOTES" > release_notes.md
          
          # Create release using gh CLI
          gh release create "$TAG_NAME" \
            --draft \
            --title "Flock Native v${{ steps.get_version.outputs.version }}" \
            --notes-file release_notes.md \
            --repo ${{ github.repository }}
          
          # Get release data for outputs
          RELEASE_DATA=$(gh release view "$TAG_NAME" --json url,uploadUrl,id --jq '{upload_url: .uploadUrl, html_url: .url, id: .id}')
          echo "upload_url=$(echo $RELEASE_DATA | jq -r .upload_url)" >> $GITHUB_OUTPUT
          echo "id=$(echo $RELEASE_DATA | jq -r .id)" >> $GITHUB_OUTPUT

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install Wine and dependencies
        run: |
          echo "üç∑ Installing Wine and dependencies for Windows builds..."
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            wine \
            wine32 \
            wine64 \
            mono-devel \
            fakeroot \
            dpkg \
            rpm \
            xvfb
          echo "‚úÖ Wine installation completed"

      - name: Setup Wine environment
        run: |
          echo "üç∑ Setting up Wine environment..."
          export WINEARCH=win64
          export WINEPREFIX=/home/runner/.wine
          
          # Initialize Wine
          xvfb-run wine64 wineboot --init
          while pgrep wineserver > /dev/null; do sleep 1; done
          
          echo "‚úÖ Wine environment initialized"

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build:native

      - name: Build Windows app with Wine
        run: |
          echo "üç∑ Building Windows app using Wine..."
          echo "üì¶ PACKAGE_TOKEN is set: ${PACKAGE_TOKEN:+yes}"
          
          # Set Wine environment
          export WINEARCH=win64
          export WINEPREFIX=/home/runner/.wine
          
          # Build with electron-builder using Wine
          xvfb-run npx electron-builder --win --publish never
          
          echo "‚úÖ Wine build completed"

      - name: Verify build output
        run: |
          echo "üìÅ Checking build output..."
          ls -la dist/electron/
          VERSION="${{ needs.create-release.outputs.version }}"
          if [ -f "dist/electron/Flock Native Setup $VERSION.exe" ]; then
            echo "‚úÖ Windows NSIS installer found"
            ls -la "dist/electron/Flock Native Setup $VERSION.exe"
          fi
          if [ -d "dist/electron/win-unpacked" ]; then
            echo "‚úÖ Windows unpacked build found"
            ls -la dist/electron/win-unpacked/
          fi
          if [ -f "dist/electron/Flock-Native-$VERSION-win.zip" ]; then
            echo "‚úÖ Windows ZIP archive found"
            ls -la "dist/electron/Flock-Native-$VERSION-win.zip"
          fi

      - name: Upload Windows NSIS installer to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/electron/Flock Native Setup ${{ needs.create-release.outputs.version }}.exe
          asset_name: Flock-Native-Setup-${{ needs.create-release.outputs.version }}.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows ZIP to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/electron/Flock-Native-${{ needs.create-release.outputs.version }}-win.zip
          asset_name: Flock-Native-${{ needs.create-release.outputs.version }}-win.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifacts
          path: dist/electron/
          retention-days: 30

  build-macos:
    name: Build macOS
    needs: create-release
    runs-on: macos-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build:native

      - name: Build and publish macOS packages
        run: npx electron-builder --mac --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Build Angular app
        run: npm run build:native

      - name: Build and publish Linux packages
        run: npx electron-builder --linux --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-build-complete:
    name: Notify Build Complete
    needs: [build-windows, build-macos, build-linux, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Add comment to release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.create-release.outputs.version }}';
            const tagName = `v${version}`;
            
            // Get the release by tag
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tagName
            });
            
            // Update release body with build completion note
            const updatedBody = release.body + `
            
            ---
            
            ## ‚úÖ Build Status
            
            All platform builds completed successfully! This release is ready for review.
            
            **Build Summary:**
            - ‚úÖ Windows (NSIS, Portable, ZIP)
            - ‚úÖ macOS (DMG, ZIP) - Universal binary
            - ‚úÖ Linux (AppImage, DEB, RPM)
            
            **Next Steps:**
            1. Review the release notes above
            2. Test the installers if needed
            3. Publish the release when ready
            
            **To publish this release:**
            \`\`\`bash
            gh release edit v${version} --draft=false
            \`\`\`
            
            Or use the [Publish Release workflow](https://github.com/CommunityStream-io/flock/actions/workflows/publish-release.yml).
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: updatedBody
            });
            
            console.log('‚úÖ Release notes updated with build status');

      - name: Post summary
        run: |
          echo "## üéâ Release Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Draft (awaiting approval)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the [draft release](https://github.com/CommunityStream-io/flock/releases)" >> $GITHUB_STEP_SUMMARY
          echo "2. Test installers if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Run the [Publish Release](https://github.com/CommunityStream-io/flock/actions/workflows/publish-release.yml) workflow to publish" >> $GITHUB_STEP_SUMMARY
