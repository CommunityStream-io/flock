name: Docker E2E Tests

on:
  push:
    branches: [ main, config-step ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/e2e-test

jobs:
  # Build and push Docker image
  build-image:
    name: Build E2E Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=pr-${{ github.event.number }},enable=${{ github.event_name == 'pull_request' }}

      - name: Debug metadata
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Generated labels:"
          echo "${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.e2e
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Run E2E tests using the pre-built image
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: build-image
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
        total-shards: [17]
    env:
      HEADLESS: true
      CI: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull pre-built image
        run: |
          docker pull ${{ needs.build-image.outputs.image-tag }}

      - name: Start application container
        run: |
          docker run -d \
            --name e2e-app-${{ matrix.shard }} \
            --network host \
            -e NODE_ENV=production \
            -e CI=true \
            -e HEADLESS=true \
            ${{ needs.build-image.outputs.image-tag }}

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4200; do sleep 2; done'

      - name: Run E2E tests
        run: |
          docker run --rm \
            --network host \
            -e CI=true \
            -e HEADLESS=true \
            -e BASE_URL=http://localhost:4200 \
            -v ${{ github.workspace }}/allure-results:/app/allure-results \
            ${{ needs.build-image.outputs.image-tag }} \
            wdio run wdio.conf.ts --shard=${{ matrix.shard }}/17

      - name: Cleanup
        if: always()
        run: |
          docker stop e2e-app-${{ matrix.shard }} || true
          docker rm e2e-app-${{ matrix.shard }} || true

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-shard-${{ matrix.shard }}
          path: allure-results/
          retention-days: 30

  # Combine and deploy reports
  e2e-report:
    name: Combine E2E Test Reports
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*
          path: combined-allure-results/
          merge-multiple: true

      - name: Upload combined Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-combined
          path: combined-allure-results/
          retention-days: 30

  deploy-allure:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: e2e-report
    if: always()
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout GitHub Pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0

      - name: Download combined Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-combined
          path: allure-results/

      - name: Install Allure command line
        run: npm install -g allure-commandline

      - name: Generate Allure Report with history
        run: |
          # Generate the report
          allure generate allure-results --clean -o allure-report
          
          # Copy to gh-pages directory
          cp -r allure-report/* gh-pages/
          
          # Create history directory if it doesn't exist
          mkdir -p gh-pages/history
          
          # Copy current report to history
          cp -r allure-report/* gh-pages/history/$(date +%Y%m%d_%H%M%S)/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages
