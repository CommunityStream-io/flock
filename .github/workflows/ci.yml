name: Feathering the Nest

on:
  push:
    branches: [ "*" ] # All branches to include development branches
  # pull_request:
  #   branches: [ "*" ] # All PRs to include forks

jobs:
  lint:
    name: Waterproof feathers (Lint)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint all projects
        run: npm run lint:all

  test:
    name: Count the flock (Unit Test)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      CODECOV_TOKEN: ${{ vars.CODECOV_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Pre-build step to create shared artifacts
  e2e-prepare:
    name: Prepare E2E Test Environment
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Setup Chrome for E2E tests
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install global packages
        run: |
          npm install -g @angular/cli allure-commandline

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ github.sha }}-e2e-prep" >> $GITHUB_OUTPUT

      - name: Cache built artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ github.sha }}-e2e-prep
            ${{ github.ref }}-e2e-prep

  e2e:
    name: Practice the murmuration (E2E Test)
    runs-on: ubuntu-latest
    needs: e2e-prepare
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
        total-shards: [19]
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      HEADLESS: true
      CI: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore cached artifacts
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/
          key: ${{ needs.e2e-prepare.outputs.cache-key }}
          restore-keys: |
            ${{ github.sha }}-e2e-prep
            ${{ github.ref }}-e2e-prep

      - name: Install dependencies (if cache miss)
        run: npm ci
        if: steps.restore-cache.outputs.cache-hit != 'true'

      - name: Install global packages (if cache miss)
        run: |
          npm install -g @angular/cli allure-commandline
        if: steps.restore-cache.outputs.cache-hit != 'true'

      - name: Build shared library (if cache miss)
        run: npx ng build --project=shared
        if: steps.restore-cache.outputs.cache-hit != 'true'

      - name: Run e2e tests with Angular dev server
        run: |
          # Start Angular dev server on shard-specific port
          PORT=$((4200 + ${{ matrix.shard }}))
          npx ng serve flock-mirage --configuration=test --port=${PORT} --host=0.0.0.0 &
          SERVER_PID=$!
          
          # Wait for server to be ready
          echo "Waiting for server on port ${PORT} to be ready..."
          timeout 60 bash -c "until curl -s http://localhost:${PORT} > /dev/null; do sleep 2; done"
          
          # Run tests with shard-specific base URL
          npx cross-env CI=true HEADLESS=true BASE_URL=http://localhost:${PORT} SHARDED_TESTS=true DEBUG_TESTS=false wdio run wdio.conf.ts --shard=${{ matrix.shard }}/19
          
          # Clean up server
          kill $SERVER_PID 2>/dev/null || true
        env:
          CI: true
          NODE_ENV: production
          # Optimize Angular build
          NG_CLI_ANALYTICS: false
          NG_FORCE_TTY: false

      - name: Upload Allure results as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: allure-results/
          retention-days: 30
        if: always()

  deploy-allure:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: e2e
    if: always()
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Download all Allure results from shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*-${{ github.run_number }}
          path: allure-results/
          merge-multiple: true
        continue-on-error: true

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.9
        with:
          allure_results: allure-results
          allure_report: allure-report

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  build:
    name: Add to the flock (Build)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install flock dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Build flock-mirage app
        run: npx ng build --project=flock-mirage --configuration=development
