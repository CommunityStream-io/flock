name: Feathering the Nest

on:
  push:
    branches: [ "*" ] # All branches to include development branches
  # pull_request:
  #   branches: [ "*" ] # All PRs to include forks

jobs:
  lint:
    name: Waterproof feathers (Lint)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint all projects
        run: npm run lint:all

  test:
    name: Count the flock (Unit Test)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      CODECOV_TOKEN: ${{ vars.CODECOV_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-e2e-docker:
    name: Build E2E Docker Image
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    outputs:
      image-tag: ${{ steps.image-info.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract image metadata
        id: image-info
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/flock-e2e-test:${{ github.sha }}"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image will be tagged as: $IMAGE_TAG"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: true
          tags: ${{ steps.image-info.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PACKAGE_TOKEN=${{ secrets.PACKAGE_TOKEN }}

  e2e-matrix:
    name: Calculate E2E Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Count feature files and generate matrix
        id: set-matrix
        run: |
          # Count feature files
          FEATURE_COUNT=$(find features -name "*.feature" | wc -l)
          echo "Found $FEATURE_COUNT feature files"
          
          # Generate shard array (1 to FEATURE_COUNT)
          SHARDS=$(seq 1 $FEATURE_COUNT | tr '\n' ',' | sed 's/,$//')
          echo "Generated shards: $SHARDS"
          
          # Create matrix JSON
          MATRIX="{\"shard\":[$SHARDS],\"total-shards\":[$FEATURE_COUNT]}"
          echo "Matrix: $MATRIX"
          
          # Set output
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  e2e:
    name: Practice the murmuration (E2E Test)
    runs-on: ubuntu-latest
    needs: [build-e2e-docker, e2e-matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.e2e-matrix.outputs.matrix) }}
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      HEADLESS: true
      CI: true
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create local directories for volumes
        run: |
          mkdir -p ${{ github.workspace }}/allure-results
          mkdir -p ${{ github.workspace }}/logs/metrics

      - name: Run E2E tests in container
        run: |
          echo "üöÄ Running shard ${{ matrix.shard }}/${{ matrix.total-shards }} in pre-built container..."
          docker run --rm \
            -e PACKAGE_TOKEN=${{ secrets.PACKAGE_TOKEN }} \
            -e SHARD=${{ matrix.shard }} \
            -e TOTAL_SHARDS=${{ matrix.total-shards }} \
            -e CI=true \
            -e HEADLESS=true \
            -v ${{ github.workspace }}/allure-results:/app/allure-results \
            -v ${{ github.workspace }}/logs:/app/logs \
            ${{ needs.build-e2e-docker.outputs.image-tag }}

      - name: Upload Allure results as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: allure-results/
          retention-days: 30
        if: always()

      - name: Upload timeout telemetry as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: timeout-telemetry-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: logs/metrics/timeout-telemetry-*.json
          retention-days: 30
        if: always()

      - name: Upload test metrics as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: logs/metrics/test-metrics-*.json
          retention-days: 30
        if: always()

  timeout-analysis:
    name: Analyze Timeout Patterns
    runs-on: ubuntu-latest
    needs: [build-e2e-docker, e2e-matrix, e2e]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Download timeout telemetry from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: timeout-telemetry-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Download test metrics from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: test-metrics-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Analyze timeout telemetry
        run: |
          echo "üîç TIMEOUT TELEMETRY ANALYSIS"
          echo "=============================="
          echo "üìÅ Checking for timeout telemetry files..."
          ls -la logs/metrics/timeout-telemetry-*.json 2>/dev/null || echo "No timeout telemetry files found"
          echo ""
          echo "üìä Running CI-specific timeout analysis..."
          npm run analyze:timeouts:ci
        continue-on-error: true

      - name: Analyze test metrics
        run: |
          echo "üìä TEST METRICS ANALYSIS"
          echo "========================"
          echo "üìÅ Checking for test metrics files..."
          ls -la logs/metrics/test-metrics-*.json 2>/dev/null || echo "No test metrics files found"
          echo ""
          echo "üìä Running metrics analysis..."
          npm run analyze:metrics
        continue-on-error: true

      - name: Generate timeout analysis report
        run: |
          echo "üìã TIMEOUT ANALYSIS SUMMARY"
          echo "==========================="
          echo "Run: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Date: $(date)"
          echo ""
          echo "üìÅ Artifacts collected:"
          find logs/metrics/ -name "*.json" -type f | wc -l | xargs echo "Total metric files:"
          echo ""
          echo "üîç For detailed analysis, check the artifacts uploaded by each shard."
        continue-on-error: true

  deploy-allure:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-e2e-docker, e2e-matrix, e2e, timeout-analysis]
    if: always()
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download all Allure results from shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*-${{ github.run_number }}
          path: allure-results/
          merge-multiple: true
        continue-on-error: true

      - name: Download timeout telemetry from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: timeout-telemetry-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Download test metrics from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: test-metrics-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Filter out phantom hook failures
        run: node scripts/filter-allure-hooks.js

      - name: Analyze timeout telemetry across all shards
        run: |
          echo "üîç Analyzing timeout telemetry from all shards..."
          npm run analyze:timeouts || echo "‚ö†Ô∏è Timeout analysis failed, continuing..."
          
          echo "üìä Analyzing test metrics across all shards..."
          npm run analyze:metrics || echo "‚ö†Ô∏è Metrics analysis failed, continuing..."

      - name: Generate Allure Badge
        run: node scripts/generate-allure-badge.js

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.9
        with:
          allure_results: allure-results
          allure_report: allure-report

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          name: github-pages-${{ github.run_id }}-${{ github.run_attempt }}
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}-${{ github.run_attempt }}

  build:
    name: Add to the flock (Build)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install flock dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Build flock-mirage app
        run: npx ng build --project=flock-mirage --configuration=development
