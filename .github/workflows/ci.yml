name: Feathering the Nest

on:
  push:
    branches: [ "*" ] # All branches to include development branches
  # pull_request:
  #   branches: [ "*" ] # All PRs to include forks

jobs:
  lint:
    name: Waterproof feathers (Lint)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint all projects
        run: npm run lint:all

  test:
    name: Count the flock (Unit Test)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      CODECOV_TOKEN: ${{ vars.CODECOV_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build Docker image for E2E testing
  e2e-build:
    name: Build E2E Docker Image
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image-tag
        run: echo "tag=e2e-test-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          tags: ${{ steps.image-tag.outputs.tag }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e:
    name: Practice the murmuration (E2E Test)
    runs-on: ubuntu-latest
    needs: e2e-build
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
        total-shards: [19]
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      HEADLESS: true
      CI: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Load Docker image
        run: |
          echo "Loading Docker image from build step..."
          # The image was built in the e2e-build job and cached
          # We need to rebuild it here since we can't share images between jobs
          docker build -f Dockerfile.test -t e2e-test-${{ github.sha }} --build-arg PACKAGE_TOKEN=${{ secrets.PACKAGE_TOKEN }} .

      - name: Create logs directory
        run: mkdir -p logs/metrics allure-results

      - name: Run E2E tests in Docker container
        run: |
          echo "üöÄ Running shard ${{ matrix.shard }}/19 in Docker container..."
            docker run --rm \
            -v "${{ github.workspace }}/logs:/app/logs" \
            -v "${{ github.workspace }}/allure-results:/app/allure-results" \
            -e CI=true \
            -e HEADLESS=true \
            -e TIMEOUT_TELEMETRY=true \
            -e SHARD=${{ matrix.shard }} \
            -e TOTAL_SHARDS=19 \
            -e NODE_ENV=test \
            -e PACKAGE_TOKEN=${{ secrets.PACKAGE_TOKEN }} \
            e2e-test-${{ github.sha }} \
            /usr/local/bin/setup-npm-auth

      - name: Upload Allure results as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: allure-results/
          retention-days: 30
        if: always()

      - name: Upload timeout telemetry as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: timeout-telemetry-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: logs/metrics/timeout-telemetry-*.json
          retention-days: 30
        if: always()

      - name: Upload test metrics as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: logs/metrics/test-metrics-*.json
          retention-days: 30
        if: always()

  timeout-analysis:
    name: Analyze Timeout Patterns
    runs-on: ubuntu-latest
    needs: [e2e-build, e2e]
    if: always() && needs.e2e-build.result != 'failure'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Download timeout telemetry from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: timeout-telemetry-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Download test metrics from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: test-metrics-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Analyze timeout telemetry
        run: |
          echo "üîç TIMEOUT TELEMETRY ANALYSIS"
          echo "=============================="
          echo "üìÅ Checking for timeout telemetry files..."
          ls -la logs/metrics/timeout-telemetry-*.json 2>/dev/null || echo "No timeout telemetry files found"
          echo ""
          echo "üìä Running CI-specific timeout analysis..."
          npm run analyze:timeouts:ci
        continue-on-error: true

      - name: Analyze test metrics
        run: |
          echo "üìä TEST METRICS ANALYSIS"
          echo "========================"
          echo "üìÅ Checking for test metrics files..."
          ls -la logs/metrics/test-metrics-*.json 2>/dev/null || echo "No test metrics files found"
          echo ""
          echo "üìä Running metrics analysis..."
          npm run analyze:metrics
        continue-on-error: true

      - name: Generate timeout analysis report
        run: |
          echo "üìã TIMEOUT ANALYSIS SUMMARY"
          echo "==========================="
          echo "Run: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Date: $(date)"
          echo ""
          echo "üìÅ Artifacts collected:"
          find logs/metrics/ -name "*.json" -type f | wc -l | xargs echo "Total metric files:"
          echo ""
          echo "üîç For detailed analysis, check the artifacts uploaded by each shard."
        continue-on-error: true

  deploy-allure:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: [e2e-build, e2e, timeout-analysis]
    if: always() && needs.e2e-build.result != 'failure'
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download all Allure results from shards
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*-${{ github.run_number }}
          path: allure-results/
          merge-multiple: true
        continue-on-error: true

      - name: Download timeout telemetry from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: timeout-telemetry-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Download test metrics from all shards
        uses: actions/download-artifact@v4
        with:
          pattern: test-metrics-shard-*-${{ github.run_number }}
          path: logs/metrics/
          merge-multiple: true
        continue-on-error: true

      - name: Filter out phantom hook failures
        run: node scripts/filter-allure-hooks.js

      - name: Analyze timeout telemetry across all shards
        run: |
          echo "üîç Analyzing timeout telemetry from all shards..."
          npm run analyze:timeouts || echo "‚ö†Ô∏è Timeout analysis failed, continuing..."
          
          echo "üìä Analyzing test metrics across all shards..."
          npm run analyze:metrics || echo "‚ö†Ô∏è Metrics analysis failed, continuing..."

      - name: Generate Allure Badge
        run: node scripts/generate-allure-badge.js

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.9
        with:
          allure_results: allure-results
          allure_report: allure-report

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          name: github-pages-${{ github.run_id }}-${{ github.run_attempt }}
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}-${{ github.run_attempt }}

  build:
    name: Add to the flock (Build)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install flock dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Build flock-mirage app
        run: npx ng build --project=flock-mirage --configuration=development
