name: Feathering the Nest

on:
  push:
    branches: [ "*" ] # All branches to include development branches
  # pull_request:
  #   branches: [ "*" ] # All PRs to include forks

jobs:
  lint:
    name: Waterproof feathers (Lint)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint all projects
        run: npm run lint:all

  test:
    name: Count the flock (Unit Test)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      CODECOV_TOKEN: ${{ vars.CODECOV_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e:
    name: Practice the murmuration (E2E Test)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
        total-shards: [17]
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
      HEADLESS: true
      CI: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Setup Chrome for E2E tests
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install Angular CLI globally
        run: npm install -g @angular/cli

      - name: Install Allure command line
        run: npm install -g allure-commandline

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Run e2e tests with concurrent app serving
        run: npx concurrently --kill-others --success first "ng serve flock-mirage --configuration=test --port=4200 --host=0.0.0.0" "wait-on http://localhost:4200 && cross-env CI=true HEADLESS=true wdio run wdio.conf.ts --shard=${{ matrix.shard }}/17"
        env:
          CI: true
          NODE_ENV: production

      - name: Ensure allure-results directory exists
        run: mkdir -p allure-results

      - name: Generate Allure report for shard ${{ matrix.shard }}
        run: npm run allure:generate
        if: always()

      - name: Upload Allure report as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-shard-${{ matrix.shard }}
          path: allure-report/
          retention-days: 30
        if: always()

      - name: Upload Allure results as artifact (shard ${{ matrix.shard }})
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-shard-${{ matrix.shard }}
          path: allure-results/
          retention-days: 30
        if: always()

  e2e-report:
    name: Combine E2E Test Reports
    runs-on: ubuntu-latest
    needs: e2e
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-shard-*
          path: combined-allure-results/
          merge-multiple: true

      - name: Install Allure command line
        run: npm install -g allure-commandline

      - name: Generate combined Allure report
        run: allure generate combined-allure-results/ --clean -o combined-allure-report/

      - name: Upload combined Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-combined
          path: combined-allure-report/
          retention-days: 30

  deploy-allure:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: e2e-report
    if: always()
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download existing reports (if any)
        run: |
          # Try to download existing reports from the gh-pages branch
          git fetch origin gh-pages:gh-pages || true
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "Found existing gh-pages branch, downloading reports..."
            git checkout gh-pages -- reports/ || echo "No existing reports found"
          else
            echo "No existing gh-pages branch found, starting fresh"
          fi

      - name: Download combined Allure report
        uses: actions/download-artifact@v4
        with:
          name: allure-report-combined
          path: allure-report/

      - name: Generate Allure report index
        run: |
          # Install Node.js dependencies if needed
          if [ ! -d "node_modules" ]; then
            npm install
          fi
          
          # Run the Allure index generator script
          node scripts/generate-allure-index.js \
            --report-dir ./allure-report \
            --output-dir ./reports

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build:
    name: Add to the flock (Build)
    runs-on: ubuntu-latest
    env:
      PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install flock dependencies
        run: npm ci

      - name: Build shared library
        run: npx ng build --project=shared

      - name: Build flock-mirage app
        run: npx ng build --project=flock-mirage --configuration=development
